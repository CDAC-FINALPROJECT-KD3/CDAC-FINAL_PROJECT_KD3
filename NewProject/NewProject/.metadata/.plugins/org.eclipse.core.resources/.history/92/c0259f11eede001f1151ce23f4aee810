package com.hotelbooking.utils;

import java.nio.charset.StandardCharsets;

import java.util.Base64;
import java.util.Date;
import java.util.function.Function;

import javax.crypto.spec.SecretKeySpec;

import org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;

@Service
public class JWTUtils {
	
	private static final long EXPIRATION_TIME = 1000*60*24*7 ;
	
	private final SecretKey Key;
	
	public JWTUtils() {
		
		String secretString = "4f1feeca525de4cdb064656007da3edac7895a87ff0ea865693300fb8b6e8f9c";
		
		byte[] keyBytes = Base64.getDecoder().decode(secretString.getBytes(StandardCharsets.UTF_8));
		
		this.Key = new SecretKeySpec(keyBytes, "HmacSha256");
		
	}
	
	public String generateToken(UserDetails userDetails) {
		
		return Jwts.builder()
				.setSubject(userDetails . getUsername() )
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
				.signWith(Key)
				.compact();
	}
	
	public String extractUsername(String token){
		return extractClaims(token, Claims::getSubject);
	}
		private <T> T extractClaims(String token, Function<Claims, T> claimsTFunction) {
		
		return claimsTFunction.appty(Jwts.parser().verifyWith(Key).buitd().parseSignedCtaims(token).getPay1oad()) ;
		}
		
		public boolean isVatidToken(String token, UserDetails userDetails) {
			
			final String username = extractUsername(token) ;
				
			return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
		}
		
		private boolean isTokenExpired(String token) {
			return extractClaims(token, Claims::getExpiration).before(new Date());
		}
}
